# This file was generated by the Tkinter Designer by Parth Jadhav
# https://github.com/ParthJadhav/Tkinter-Designer


from cmd import PROMPT
from re import I, S
from tempfile import template
from tkinter import END, Label, Tk, Canvas, Entry, Text, Button, PhotoImage, simpledialog
from datetime import datetime
from pathlib import Path
from this import d
from threading import Thread
from turtle import delay, hideturtle, title
from numpy import kaiser
from serial import serialwin32
import time

import adafruit_fingerprint
import pandas as pd
import requests

uart = serialwin32.Serial(port='COM4', baudrate=115200, timeout=1)
finger = adafruit_fingerprint.Adafruit_Fingerprint(uart)


import mysql.connector
cnx=mysql.connector.connect(user='person1',password='123456789',host='localhost',database='fingerprint')       # connect to MySql database
cur=cnx.cursor()

# fingerprint


def get_fingerprint():
    """Get a finger print image, template it, and see if it matches! """
    printLabel("Waiting for image...")
    while finger.get_image() != adafruit_fingerprint.OK:
        pass
    printLabel("Templating...")
    if finger.image_2_tz(1) != adafruit_fingerprint.OK:
        return False
    printLabel("Searching...")
    if finger.finger_search() != adafruit_fingerprint.OK:
        return False

    return True

# pylint: disable=too-many-branches


def get_fingerprint_detail():
    """Get a finger print image, template it, and see if it matches!
    This time, print out each error instead of just returning on failure"""
    printLabel("Getting image...")
    i = finger.get_image()
    if i == adafruit_fingerprint.OK:
        printLabel("Image taken")
    else:
        if i == adafruit_fingerprint.NOFINGER:
            printLabel("No finger detected")
        elif i == adafruit_fingerprint.IMAGEFAIL:
            printLabel("Imaging error")
        else:
            printLabel("Other error")
        return False

    printLabel("Templating...")
    i = finger.image_2_tz(1)
    if i == adafruit_fingerprint.OK:
        printLabel("Templated")
    else:
        if i == adafruit_fingerprint.IMAGEMESS:
            printLabel("Image too messy")
        elif i == adafruit_fingerprint.FEATUREFAIL:
            printLabel("Could not identify features")
        elif i == adafruit_fingerprint.INVALIDIMAGE:
            printLabel("Image invalid")
        else:
            printLabel("Other error")
        return False

    printLabel("Searching...")
    i = finger.finger_fast_search()
    # pylint: disable=no-else-return
    # This block needs to be refactored when it can be tested.
    if i == adafruit_fingerprint.OK:
        printLabel("Found fingerprint!")
        return True
    else:
        if i == adafruit_fingerprint.NOTFOUND:
            printLabel("No match found")
        else:
            printLabel("Other error")
        return False

# print text to label


def printLabel(texts, delay=True):
    personInfo.config(text=texts)
    window.update()
    if delay:
        time.sleep(0.5)

# pylint: disable=too-many-statements


def enroll_finger(location):
    """Take a 2 finger images and template it, then store in 'location' """
    for fingerimg in range(1, 3):
        if fingerimg == 1:
            printLabel("Place finger on sensor...")
        else:
            printLabel("Place same finger again...")

        while True:
            i = finger.get_image()
            if i == adafruit_fingerprint.OK:
                printLabel("Image taken")
                break
            if i == adafruit_fingerprint.NOFINGER:
                printLabel(f"[{fingerimg}] no finger", delay=False)
            elif i == adafruit_fingerprint.IMAGEFAIL:
                printLabel("Imaging error")
                return False
            else:
                printLabel("Other error")
                return False

        printLabel("Templating...")
        i = finger.image_2_tz(fingerimg)
        if i == adafruit_fingerprint.OK:
            printLabel("Templated")
        else:
            if i == adafruit_fingerprint.IMAGEMESS:
                printLabel("Image too messy")
            elif i == adafruit_fingerprint.FEATUREFAIL:
                printLabel("Could not identify features")
            elif i == adafruit_fingerprint.INVALIDIMAGE:
                printLabel("Image invalid")
            else:
                printLabel("Other error")
            return False

        if fingerimg == 1:
            printLabel("Remove finger")
            time.sleep(1)
            while i != adafruit_fingerprint.NOFINGER:
                i = finger.get_image()

    printLabel("Creating model...")
    i = finger.create_model()

    print(i)
    
    if i == adafruit_fingerprint.OK:
        printLabel("Created")
    else:
        if i == adafruit_fingerprint.ENROLLMISMATCH:
            printLabel("Prints did not match")
        else:
            printLabel("Other error")
        return False

    printLabel(f"Storing model #{location}...")
    time.sleep(1)
    i = finger.store_model(location)
    if i == adafruit_fingerprint.OK:
        printLabel("Stored")
    else:
        if i == adafruit_fingerprint.BADLOCATION:
            printLabel("Bad storage location")
        elif i == adafruit_fingerprint.FLASHERR:
            printLabel("Flash storage error")
        else:
            printLabel("Other error")
        return False

    return True

##############################################


def get_num():
    # Use input() to get a valid number from 1 to 127. Retry till success!
    # if len(inputBox.get)
    USER_INP = simpledialog.askstring(
        title="User Number", prompt="input number from 1 to 127:")
    i = 0
    
    try:
        i = int(USER_INP)
    except ValueError:
        printLabel("Please enter number type only")

    r.append(i)
    
    return i


def read_template():
    time.sleep(2)
    if finger.read_templates() != adafruit_fingerprint.OK:
        raise RuntimeError("Failed to read templates")
    printLabel(f"Fingerprint templates:{finger.templates}")


def relative_to_assets(path: str) -> Path:
    return ASSETS_PATH / Path(path)


def button1_callback():
    i = get_num()
    if finger.delete_model(i) == adafruit_fingerprint.OK:
        deletespec()
        printLabel("Deleted!")
    else:
        printLabel("Failed to delete")

    
    read_template()


def button2_callback():
    if get_fingerprint():
        # Display using difference formats
        printLabel(
            f"Detected # {finger.finger_id} with confidence {finger.confidence} \n {now.ctime()}")
    else:
        printLabel("Finger not found")
    j = finger.finger_id
    k = callid(j)
    i = datetime.now()
    city = data['city']
    country = data['country']
    location = data['loc'].split(',')

    latitude = location[0]
    longitude = location[1]

    time.sleep(2)
    printLabel(k)
    cur.execute("insert into fingerprint(Time, ID, Country, City, Latitude, longitude) values('%s','%s','%s','%s','%s','%s')" %(i.strftime('%Y-%m-%d %H:%M:%S'),k,country,city,latitude,longitude) )     # upadate database
    cnx.commit()
    

def button3_callback():
    enroll_finger(get_num())

    to_id()
    csv()
    
    read_template()

def button4_callback():
    my_w = Tk()
    my_w.geometry("700x250") 

    cur.execute("SELECT * FROM fingerprint")
    i=0 
    for fingerprint in cur: 
        for j in range(len(fingerprint)):
            e = Entry(my_w, width=20, fg='black')
            e.grid(row=i, column=j) 
            e.insert(END, fingerprint[j])
        i=i+1
    my_w.mainloop()
    
    
def callid(j):
    i = pd.read_csv("iddata.csv", index_col= "Number")
    i = pd.DataFrame(i, columns = ["ID"])
    e = i.at[j,"ID"]
    return e
    
############################location

res = requests.get('https://ipinfo.io/')
data = res.json()



r = []
s = []

def to_id():
    
    id = simpledialog.askstring(
        title="User ID", prompt="input number Student ID:")
    
    try:
        id = str(id)
    except ValueError:
        printLabel("Please enter id only")
    s.append(id)
    return id
    

def csv():
    dflist = pd.DataFrame(list(zip(r, s)),
              columns=["Number","ID"])
    dflist.to_csv("iddata.csv", index = False)



def deletespec(): 
    
    members = simpledialog.askstring(
        title="Delete ID", prompt="Please enter a ID to be deleted:")

    df = pd.read_csv("iddata.csv")
    dflist = pd.DataFrame(df)
    dflist.drop(dflist.index[dflist['ID'] == members], inplace = True)
    dflist.to_csv("iddata.csv", index = False)



##################################################
# DateTime

# Get current date and time
now = datetime.today()
##################################################

# from tkinter import *
# Explicit imports to satisfy Flake8

OUTPUT_PATH = Path(__file__).parent
ASSETS_PATH = OUTPUT_PATH / Path("./assets")

window = Tk()

window.geometry("752x410")
window.configure(bg="#2436D6")

# รับค่าจากการกดปุ่ม
canvas = Canvas(
    window,
    bg="#2436D6",
    height=410,
    width=752,
    bd=0,
    highlightthickness=0,
    relief="ridge"
)

canvas.place(x=0, y=0)
image_image_1 = PhotoImage(
    file=relative_to_assets("image_1.png"))
image_1 = canvas.create_image(
    375.0,
    45.0,
    image=image_image_1
)

canvas.create_text(
    67.0,
    28.0,
    anchor="nw",
    text="FINGERPRINT",
    fill="#000000",
    font=("Roboto", 30 * -1)
)

# textbox


# Text label
personInfo = Label()
personInfo.place(
    x=226.0,
    y=300.0,
    width=300.0,
    height=80.0
)

# delete
button_image_1 = PhotoImage(
    file=relative_to_assets("button_1.png"))
button_1 = Button(
    image=button_image_1,
    borderwidth=0,
    highlightthickness=0,
    relief="flat", command=button1_callback
)
button_1.place(
    x=565.0,
    y=195.0,
    width=95.0,
    height=83.0
)

# find
button_image_2 = PhotoImage(
    file=relative_to_assets("button_2.png"))
button_2 = Button(
    image=button_image_2,
    borderwidth=0,
    highlightthickness=0,
    relief="flat", command=button2_callback
)
button_2.place(
    x=325.0,
    y=195.0,
    width=95.0,
    height=83.0
)
# data from sql

button_image_4 = PhotoImage(
    file=relative_to_assets("button_data.png"))
button_4 = Button(
    image=button_image_4,
    borderwidth=0,
    highlightthickness=0,
    relief ="flat", command = button4_callback
)
button_4.place(
    x= 20.0,
    y= 350.0,
    width=40.0,
    height=40.0
)
# enroll
button_image_3 = PhotoImage(
    file=relative_to_assets("button_3.png"))
button_3 = Button(
    image=button_image_3,
    borderwidth=0,
    highlightthickness=0,
    relief="flat", command=button3_callback
)
button_3.place(
    x=85.0,
    y=195.0,
    width=95.0,
    height=83.0
)

window.resizable(False, False)
if finger.read_templates() != adafruit_fingerprint.OK:
    raise RuntimeError("Failed to read templates")
printLabel(f"Fingerprint templates:{finger.templates}")
window.mainloop()

#################################

